# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # check swift tests
  swift-test:
    # The type of runner that the job will run on
    runs-on: macos-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    - name: xcode-select
      run: sudo xcode-select -s /Applications/Xcode_12_beta.app
    - name: test
      run: swift test
  # check the metal situation
  metal-test: 
      runs-on: macos-latest

      steps:
      - uses: actions/checkout@v2
      - name: Get Date
        id: get-date
        run: |
          echo "::set-output name=minute::$(/bin/date -u "+%M")"
          echo "::set-output name=week::$(/bin/date -u "+%U")"
          echo "::set-output name=date::$(/bin/date -u "+%Y%m%d")"
          echo "::set-output name=hour::$(/bin/date -u "+%H")"
        shell: bash
      - uses: actions/cache@v2
        with:
          path: dd-tar-cache
          key: metaltest-1-${{ steps.get-date.outputs.week }}-${{ steps.get-date.outputs.date }}-${{ steps.get-date.outputs.hour }}-${{ steps.get-date.outputs.minute }}
          restore-keys: |
            metaltest-1-${{ steps.get-date.outputs.week }}-${{ steps.get-date.outputs.date }}-${{ steps.get-date.outputs.hour }}
            metaltest-1-${{ steps.get-date.outputs.week }}-${{ steps.get-date.outputs.date }}
            metaltest-1-${{ steps.get-date.outputs.week }}
            metaltest-1
      - name: dd untar
        run: if [ -f dd-tar-cache/dd.tar ]; then tar xvPpf dd-tar-cache/dd.tar; else echo "No cache file"; fi

      - name: set mtime
        run: |
          set +e
          git submodule foreach 'rev=HEAD; for f in $(git ls-tree -r -t --full-name --name-only "$rev") ; do     touch -t $(git log --pretty=format:%cd --date=format:%Y%m%d%H%M.%S -1 "$rev" -- "$f") "$f"; done'
          rev=HEAD; for f in $(git ls-tree -r -t --full-name --name-only "$rev") ; do     touch -t $(git log --pretty=format:%cd --date=format:%Y%m%d%H%M.%S -1 "$rev" -- "$f") "$f"; done
      - name: xcode-select
        run: sudo xcode-select -s /Applications/Xcode_12_beta.app
      - name: test
        run: |
             cd ExtraTests/MetalTest
             xcodebuild -IgnoreFileSystemDeviceInodeChanges=YES -derivedDataPath localDerivedData -scheme "MetalTest (macOS)" | xcpretty && exit ${PIPESTATUS[0]}
             # need to use simulator here to avoid CS issues
             xcodebuild -IgnoreFileSystemDeviceInodeChanges=YES -derivedDataPath localDerivedData -scheme "MetalTest (iOS)" -sdk iphonesimulator | xcpretty && exit ${PIPESTATUS[0]}

  dep-check: 
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: Get Date
      id: get-date
      run: |
        echo "::set-output name=minute::$(/bin/date -u "+%M")"
        echo "::set-output name=week::$(/bin/date -u "+%U")"
        echo "::set-output name=date::$(/bin/date -u "+%Y%m%d")"
        echo "::set-output name=hour::$(/bin/date -u "+%H")"
      shell: bash
    - uses: actions/cache@v2
      with:
        path: dd-tar-cache
        key: depcheck1-${{ steps.get-date.outputs.week }}-${{ steps.get-date.outputs.date }}-${{ steps.get-date.outputs.hour }}-${{ steps.get-date.outputs.minute }}
        restore-keys: |
          depcheck1-${{ steps.get-date.outputs.week }}-${{ steps.get-date.outputs.date }}-${{ steps.get-date.outputs.hour }}
          depcheck1-${{ steps.get-date.outputs.week }}-${{ steps.get-date.outputs.date }}
          depcheck1-${{ steps.get-date.outputs.week }}
          depcheck1
    - name: dd untar
      run: if [ -f dd-tar-cache/dd.tar ]; then tar xvPpf dd-tar-cache/dd.tar; else echo "No cache file"; fi
    - name: set mtime
      run: |
        set +e
        git submodule foreach 'rev=HEAD; for f in $(git ls-tree -r -t --full-name --name-only "$rev") ; do     touch -t $(git log --pretty=format:%cd --date=format:%Y%m%d%H%M.%S -1 "$rev" -- "$f") "$f"; done'
        rev=HEAD; for f in $(git ls-tree -r -t --full-name --name-only "$rev") ; do     touch -t $(git log --pretty=format:%cd --date=format:%Y%m%d%H%M.%S -1 "$rev" -- "$f") "$f"; done
    - name: xcode-select
      run: sudo xcode-select -s /Applications/Xcode_12_beta.app
    - name: test
      run: |
           cd ExtraTests/DepCheck
           # need to use simulator here to avoid CS issues
           # note that we check iOS release mode due to FB8430635
           xcodebuild -IgnoreFileSystemDeviceInodeChanges=YES -derivedDataPath localDerivedData -scheme "DepCheck (iOS)" -sdk iphonesimulator -configuration Release | xcpretty && exit ${PIPESTATUS[0]}
